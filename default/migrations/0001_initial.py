# Generated by Django 3.1.7 on 2021-04-02 02:10

import datetime
from django.conf import settings
from django.db import migrations, models
import django.db.models.deletion
import multiselectfield.db.fields
import simple_history.models
import uuid


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ChargerCondition',
            fields=[
                ('id', models.CharField(max_length=10, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Charger Condition',
                'verbose_name_plural': 'Charger Conditions',
            },
        ),
        migrations.CreateModel(
            name='ChargerType',
            fields=[
                ('id', models.CharField(max_length=10, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Charger Type',
                'verbose_name_plural': 'Charger Types',
            },
        ),
        migrations.CreateModel(
            name='Device',
            fields=[
                ('id', models.CharField(max_length=10, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('iiq_id', models.CharField(blank=True, max_length=40, null=True)),
                ('status', models.CharField(choices=[('AS', 'Storage'), ('BR', 'Broken'), ('IS', 'In Service'), ('MI', 'Missing'), ('RE', 'Retired'), ('SD', 'Sold'), ('ST', 'Stolen')], default='IS', max_length=2)),
                ('manufacturer', models.CharField(blank=True, max_length=25, null=True)),
                ('model', models.CharField(blank=True, max_length=50, null=True)),
                ('serial', models.CharField(max_length=20)),
                ('bin', models.CharField(blank=True, max_length=10, null=True)),
                ('owner_assign_date', models.DateTimeField(blank=True, null=True)),
                ('iiq_updated', models.DateTimeField(default=datetime.datetime(1800, 1, 1, 0, 0), verbose_name='IIQ Updated')),
                ('mosyle_updated', models.DateTimeField(default=datetime.datetime(1800, 1, 1, 0, 0), verbose_name='Mosyle Updated')),
                ('munki_updated', models.DateTimeField(default=datetime.datetime(1800, 1, 1, 0, 0), verbose_name='Munki Updated')),
                ('sadis_updated', models.DateTimeField(auto_now=True)),
            ],
            options={
                'verbose_name_plural': 'Devices',
                'ordering': ['id', 'manufacturer', 'model'],
            },
        ),
        migrations.CreateModel(
            name='DeviceModel',
            fields=[
                ('id', models.CharField(max_length=10, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=50)),
                ('charger', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.chargertype')),
            ],
            options={
                'verbose_name': 'Device Model',
                'verbose_name_plural': 'Device Models',
            },
        ),
        migrations.CreateModel(
            name='DeviceRole',
            fields=[
                ('id', models.CharField(max_length=10, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Device Role',
                'verbose_name_plural': 'Device Roles',
            },
        ),
        migrations.CreateModel(
            name='DeviceStatuses',
            fields=[
                ('id', models.CharField(max_length=10, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Device Status',
                'verbose_name_plural': 'Device Statuses',
            },
        ),
        migrations.CreateModel(
            name='FineSubtypes',
            fields=[
                ('alias', models.CharField(max_length=10, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=100)),
                ('value', models.DecimalField(decimal_places=2, max_digits=6)),
                ('flexible', models.BooleanField(default=False)),
                ('device_type', multiselectfield.db.fields.MultiSelectField(choices=[('U', 'Universal'), ('MB', 'MacBook'), ('IP', 'iPad'), ('HS', 'HotSpot')], default='U', max_length=50)),
            ],
            options={
                'verbose_name': 'Fine Subtype',
                'verbose_name_plural': 'Fine Subtypes',
            },
        ),
        migrations.CreateModel(
            name='FineTypes',
            fields=[
                ('alias', models.CharField(max_length=10, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(max_length=100)),
                ('value', models.DecimalField(blank=True, decimal_places=2, max_digits=6, null=True)),
            ],
            options={
                'verbose_name': 'Fine Type',
                'verbose_name_plural': 'Fine Types',
            },
        ),
        migrations.CreateModel(
            name='Location',
            fields=[
                ('id', models.CharField(max_length=5, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('iiq_id', models.UUIDField(blank=True, null=True)),
                ('name', models.CharField(max_length=30)),
                ('type', models.CharField(choices=[('E', 'Elementary'), ('G', 'Government'), ('O', 'Other'), ('S', 'Secondary'), ('V', 'Virtual')], default='O', max_length=1)),
                ('alias', models.CharField(blank=True, max_length=10, null=True)),
                ('team_id', models.UUIDField(blank=True, null=True)),
                ('msb_store', models.CharField(max_length=10, null=True, verbose_name='MSB Store ID')),
                ('msb_glaccount', models.CharField(max_length=30, null=True, verbose_name='MSB G/L Account')),
            ],
            options={
                'verbose_name_plural': 'Locations',
                'ordering': ['id'],
            },
        ),
        migrations.CreateModel(
            name='PersonPrograms',
            fields=[
                ('id', models.CharField(max_length=10, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=50)),
                ('description', models.CharField(blank=True, max_length=100, null=True)),
                ('expiration', models.DateTimeField(default=datetime.datetime(1800, 1, 1, 8, 0), verbose_name='Expiration Date')),
            ],
            options={
                'verbose_name': 'Summer Program',
                'verbose_name_plural': 'Summer Programs',
            },
        ),
        migrations.CreateModel(
            name='PersonStatuses',
            fields=[
                ('id', models.CharField(max_length=10, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Person Status',
                'verbose_name_plural': 'Person Statuses',
            },
        ),
        migrations.CreateModel(
            name='PersonTypes',
            fields=[
                ('id', models.CharField(max_length=10, primary_key=True, serialize=False, unique=True)),
                ('name', models.CharField(max_length=50)),
            ],
            options={
                'verbose_name': 'Person Type',
                'verbose_name_plural': 'Person Types',
            },
        ),
        migrations.CreateModel(
            name='Person',
            fields=[
                ('id', models.CharField(max_length=15, primary_key=True, serialize=False, unique=True, verbose_name='ID')),
                ('iiq_id', models.UUIDField(blank=True, null=True)),
                ('name', models.CharField(max_length=50)),
                ('username', models.CharField(max_length=30, unique=True)),
                ('type', models.CharField(choices=[('F', 'Staff'), ('S', 'Student'), ('N', 'None')], default='N', max_length=1)),
                ('iiq_updated', models.DateTimeField(default=datetime.datetime(1800, 1, 1, 0, 0), verbose_name='IIQ Updated')),
                ('mosyle_updated', models.DateTimeField(default=datetime.datetime(1800, 1, 1, 0, 0), verbose_name='Mosyle Updated')),
                ('sadis_updated', models.DateTimeField(auto_now=True, verbose_name='SADIS Updated')),
                ('status', models.BooleanField(default=0)),
                ('foreign_status', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.personstatuses')),
                ('location', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.location')),
            ],
            options={
                'verbose_name_plural': 'People',
                'ordering': ['id', 'name'],
            },
        ),
        migrations.CreateModel(
            name='Note',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False, unique=True)),
                ('item_id', models.CharField(max_length=25)),
                ('attached_id', models.CharField(blank=True, max_length=36, null=True)),
                ('body', models.TextField()),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('updated', models.DateTimeField(auto_now=True)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'ordering': ['item_id', 'id'],
            },
        ),
        migrations.CreateModel(
            name='HistoricalPerson',
            fields=[
                ('id', models.CharField(db_index=True, max_length=15, verbose_name='ID')),
                ('iiq_id', models.UUIDField(blank=True, null=True)),
                ('name', models.CharField(max_length=50)),
                ('username', models.CharField(db_index=True, max_length=30)),
                ('type', models.CharField(choices=[('F', 'Staff'), ('S', 'Student'), ('N', 'None')], default='N', max_length=1)),
                ('iiq_updated', models.DateTimeField(default=datetime.datetime(1800, 1, 1, 0, 0), verbose_name='IIQ Updated')),
                ('mosyle_updated', models.DateTimeField(default=datetime.datetime(1800, 1, 1, 0, 0), verbose_name='Mosyle Updated')),
                ('sadis_updated', models.DateTimeField(blank=True, editable=False, verbose_name='SADIS Updated')),
                ('status', models.BooleanField(default=0)),
                ('history_change_reason', models.TextField(null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('foreign_status', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.personstatuses')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location')),
            ],
            options={
                'verbose_name': 'historical person',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalNote',
            fields=[
                ('id', models.IntegerField(blank=True, db_index=True)),
                ('item_id', models.CharField(max_length=25)),
                ('attached_id', models.CharField(blank=True, max_length=36, null=True)),
                ('body', models.TextField()),
                ('created', models.DateTimeField(blank=True, editable=False)),
                ('updated', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('author', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical note',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDeviceAssessment',
            fields=[
                ('id', models.CharField(db_index=True, default=uuid.uuid4, editable=False, max_length=36)),
                ('created', models.DateTimeField(blank=True, editable=False)),
                ('history_change_reason', models.TextField(null=True)),
                ('device_damage_present', models.BooleanField(default=0)),
                ('device_damage_dd', models.BooleanField(default=0)),
                ('device_damage_edd', models.BooleanField(default=0)),
                ('device_damage_lis', models.BooleanField(default=0)),
                ('device_damage_cs', models.BooleanField(default=0)),
                ('device_damage_tnc', models.BooleanField(default=0)),
                ('device_damage_tc', models.BooleanField(default=0)),
                ('device_damage_ms', models.BooleanField(default=0)),
                ('device_damage_ld', models.BooleanField(default=0)),
                ('device_damage_mkr', models.BooleanField(default=0)),
                ('device_damage_mku', models.BooleanField(default=0)),
                ('device_damage_bci', models.BooleanField(default=0)),
                ('device_damage_ccd', models.BooleanField(default=0)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('author', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('device', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.device')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical device assessment',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalDevice',
            fields=[
                ('id', models.CharField(db_index=True, max_length=10, verbose_name='ID')),
                ('iiq_id', models.CharField(blank=True, max_length=40, null=True)),
                ('history_change_reason', models.TextField(null=True)),
                ('status', models.CharField(choices=[('AS', 'Storage'), ('BR', 'Broken'), ('IS', 'In Service'), ('MI', 'Missing'), ('RE', 'Retired'), ('SD', 'Sold'), ('ST', 'Stolen')], default='IS', max_length=2)),
                ('manufacturer', models.CharField(blank=True, max_length=25, null=True)),
                ('model', models.CharField(blank=True, max_length=50, null=True)),
                ('serial', models.CharField(max_length=20)),
                ('bin', models.CharField(blank=True, max_length=10, null=True)),
                ('owner_assign_date', models.DateTimeField(blank=True, null=True)),
                ('iiq_updated', models.DateTimeField(default=datetime.datetime(1800, 1, 1, 0, 0), verbose_name='IIQ Updated')),
                ('mosyle_updated', models.DateTimeField(default=datetime.datetime(1800, 1, 1, 0, 0), verbose_name='Mosyle Updated')),
                ('munki_updated', models.DateTimeField(default=datetime.datetime(1800, 1, 1, 0, 0), verbose_name='Munki Updated')),
                ('sadis_updated', models.DateTimeField(blank=True, editable=False)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('foreign_model', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.devicemodel')),
                ('foreign_status', models.ForeignKey(blank=True, db_constraint=False, default='A', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.devicestatuses')),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location')),
                ('owner', models.ForeignKey(blank=True, db_constraint=False, default='', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.person')),
                ('owner_assign_author', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'historical device',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='HistoricalCharger',
            fields=[
                ('id', models.CharField(db_index=True, default=uuid.uuid4, editable=False, max_length=36)),
                ('history_change_reason', models.TextField(null=True)),
                ('owner_assign_date', models.DateTimeField(blank=True, null=True)),
                ('bin', models.CharField(blank=True, max_length=10, null=True)),
                ('adapter', models.BooleanField(default=1)),
                ('cord', models.BooleanField(default=1)),
                ('history_id', models.AutoField(primary_key=True, serialize=False)),
                ('history_date', models.DateTimeField()),
                ('history_type', models.CharField(choices=[('+', 'Created'), ('~', 'Changed'), ('-', 'Deleted')], max_length=1)),
                ('history_user', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('location', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.location')),
                ('owner', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.person')),
                ('owner_assign_author', models.ForeignKey(blank=True, db_constraint=False, null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to=settings.AUTH_USER_MODEL)),
                ('status', models.ForeignKey(blank=True, db_constraint=False, default='N', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.chargercondition')),
                ('type', models.ForeignKey(blank=True, db_constraint=False, default='PROP', null=True, on_delete=django.db.models.deletion.DO_NOTHING, related_name='+', to='inventory.chargertype')),
            ],
            options={
                'verbose_name': 'historical charger',
                'ordering': ('-history_date', '-history_id'),
                'get_latest_by': 'history_date',
            },
            bases=(simple_history.models.HistoricalChanges, models.Model),
        ),
        migrations.CreateModel(
            name='DeviceAssignment',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, max_length=36, primary_key=True, serialize=False, unique=True)),
                ('device', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='inventory.device')),
                ('role', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.devicerole')),
            ],
            options={
                'verbose_name': 'Device Assignment',
                'verbose_name_plural': 'Device Assignments',
            },
        ),
        migrations.CreateModel(
            name='DeviceAssessment',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False, unique=True)),
                ('created', models.DateTimeField(auto_now_add=True)),
                ('device_damage_present', models.BooleanField(default=0)),
                ('device_damage_dd', models.BooleanField(default=0)),
                ('device_damage_edd', models.BooleanField(default=0)),
                ('device_damage_lis', models.BooleanField(default=0)),
                ('device_damage_cs', models.BooleanField(default=0)),
                ('device_damage_tnc', models.BooleanField(default=0)),
                ('device_damage_tc', models.BooleanField(default=0)),
                ('device_damage_ms', models.BooleanField(default=0)),
                ('device_damage_ld', models.BooleanField(default=0)),
                ('device_damage_mkr', models.BooleanField(default=0)),
                ('device_damage_mku', models.BooleanField(default=0)),
                ('device_damage_bci', models.BooleanField(default=0)),
                ('device_damage_ccd', models.BooleanField(default=0)),
                ('author', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('device', models.ForeignKey(null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.device')),
            ],
        ),
        migrations.AddField(
            model_name='device',
            name='foreign_model',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.devicemodel'),
        ),
        migrations.AddField(
            model_name='device',
            name='foreign_status',
            field=models.ForeignKey(default='A', null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.devicestatuses'),
        ),
        migrations.AddField(
            model_name='device',
            name='location',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.location'),
        ),
        migrations.AddField(
            model_name='device',
            name='owner',
            field=models.ForeignKey(blank=True, default='', null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.person'),
        ),
        migrations.AddField(
            model_name='device',
            name='owner_assign_author',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL),
        ),
        migrations.AddField(
            model_name='device',
            name='role',
            field=models.ManyToManyField(through='inventory.DeviceAssignment', to='inventory.DeviceRole'),
        ),
        migrations.AddField(
            model_name='chargertype',
            name='brick_fine',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='brick_fine', to='inventory.finesubtypes'),
        ),
        migrations.AddField(
            model_name='chargertype',
            name='cable_fine',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cable_fine', to='inventory.finesubtypes'),
        ),
        migrations.AddField(
            model_name='chargertype',
            name='combined_fine',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='combined_fine', to='inventory.finesubtypes'),
        ),
        migrations.CreateModel(
            name='Charger',
            fields=[
                ('id', models.CharField(default=uuid.uuid4, editable=False, max_length=36, primary_key=True, serialize=False, unique=True)),
                ('owner_assign_date', models.DateTimeField(blank=True, null=True)),
                ('bin', models.CharField(blank=True, max_length=10, null=True)),
                ('adapter', models.BooleanField(default=1)),
                ('cord', models.BooleanField(default=1)),
                ('location', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.location')),
                ('owner', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.person')),
                ('owner_assign_author', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, to=settings.AUTH_USER_MODEL)),
                ('status', models.ForeignKey(default='N', null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.chargercondition')),
                ('type', models.ForeignKey(default='PROP', null=True, on_delete=django.db.models.deletion.SET_NULL, to='inventory.chargertype')),
            ],
        ),
    ]
